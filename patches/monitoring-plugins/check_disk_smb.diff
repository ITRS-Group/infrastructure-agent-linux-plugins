--- ./plugins-scripts/check_disk_smb.pl	2016-11-29 08:45:08.000000000 +0000
+++ ./plugins-scripts/check_disk_smb.pl	2021-10-04 13:42:58.792468436 +0100
@@ -1,9 +1,9 @@
-#!@PERL@ -w
+#!/usr/bin/perl
 #
 #
 # check_disk.pl <host> <share> <user> <pass> [warn] [critical] [port]
 #
-# Monitoring host script to get the disk usage from a SMB share
+# Nagios host script to get the disk usage from a SMB share
 #
 # Changes and Modifications
 # =========================
@@ -15,184 +15,247 @@
 #  allow setting of limits in MBytes or GBytes.  Percentage settings for large
 #  drives is a pain in the butt
 # 2-May-2002 - SGhosh fix for embedded perl
+# 13-Aug-2008 - Steve Huff
+#  Rewrote using Nagios::Plugin
 #
+# $Id: check_disk_smb.pl,v 1.4 2008/08/13 19:08:20 shuff Exp $
 #
 
 require 5.004;
 use POSIX;
 use strict;
-use Getopt::Long;
-use vars qw($opt_P $opt_V $opt_h $opt_H $opt_s $opt_W $opt_u $opt_p $opt_w $opt_c $opt_a $verbose);
-use vars qw($PROGNAME);
-use FindBin;
-use lib "$FindBin::Bin";
+use warnings;
+use lib "/opt/itrs/infrastructure-agent/plugins/perl/lib", "/opt/itrs/infrastructure-agent/plugins";
 use utils qw($TIMEOUT %ERRORS &print_revision &support &usage);
 
-sub print_help ();
-sub print_usage ();
+use Monitoring::Plugin;
+use Monitoring::Plugin::Getopt;
 
-$PROGNAME = "check_disk_smb";
+my ($np) = Monitoring::Plugin->new(
+    shortname => 'check_disk_smb',
+    timeout   => $TIMEOUT,
+);
 
-$ENV{'PATH'}='@TRUSTED_PATH@';
-$ENV{'BASH_ENV'}=''; 
-$ENV{'ENV'}='';
-
-Getopt::Long::Configure('bundling');
-GetOptions
-	("v"   => \$verbose, "verbose"    => \$verbose,
-	 "P=s" => \$opt_P, "port=s"     => \$opt_P,
-	 "V"   => \$opt_V, "version"    => \$opt_V,
-	 "h"   => \$opt_h, "help"       => \$opt_h,
-	 "w=s" => \$opt_w, "warning=s"  => \$opt_w,
-	 "c=s" => \$opt_c, "critical=s" => \$opt_c,
-	 "p=s" => \$opt_p, "password=s" => \$opt_p,
-	 "u=s" => \$opt_u, "username=s" => \$opt_u,
-	 "s=s" => \$opt_s, "share=s"    => \$opt_s,
-	 "W=s" => \$opt_W, "workgroup=s" => \$opt_W,
-	 "H=s" => \$opt_H, "hostname=s" => \$opt_H,
-	 "a=s" => \$opt_a, "address=s" => \$opt_a);
-
-if ($opt_V) {
-	print_revision($PROGNAME,'@NP_VERSION@'); #'
-	exit $ERRORS{'UNKNOWN'};
-}
-
-if ($opt_h) {print_help(); exit $ERRORS{'UNKNOWN'};}
-
-my $smbclient = $utils::PATH_TO_SMBCLIENT;
-$smbclient    || usage("check requires smbclient, smbclient not set\n");
--x $smbclient || usage("check requires smbclient, $smbclient: $!\n");
+my ($ng) = Monitoring::Plugin::Getopt->new(
+    usage =>
+        "Usage: %s -H <host> -s <share> -u <user> -p <password> -w <warn> -c <crit> [-W <workgroup>] [-P <port>] [--help] [--version]\n",
+    version => '1.2',
+    blurb   => 'Perl Check SMB Disk plugin for Nagios',
+    extra =>
+        "\nIf thresholds are followed by either a k, M, or G then check to see if that much disk space is available (kilobytes, Megabytes, Gigabytes)\n\nWarning percentage should be less than critical\nWarning (remaining) disk space should be greater than critical.",
+    license => 'Copyright (c) 2000 Michael Anthon/Karl DeBisschop',
+);
 
-# Options checking
+$ng->arg(
+    spec     => 'hostname|H=s',
+    help     => "NetBIOS name of the server",
+    required => 1,
+);
+
+$ng->arg(
+    spec     => 'share|s=s',
+    help     => "Share name to be tested",
+    required => 1,
+);
+
+$ng->arg(
+    spec     => 'workgroup|W=s',
+    help     => "Workgroup or Domain used (Defaults to \"WORKGROUP\")",
+    required => 0,
+    default  => 'WORKGROUP',
+);
+
+$ng->arg(
+    spec     => 'user|u=s',
+    help     => "Username to log in to server. (Defaults to \"guest\")",
+    required => 0,
+    default  => 'guest',
+);
+
+$ng->arg(
+    spec => 'password|p=s',
+    help => "Password to log in to server. (Defaults to an empty password)",
+    required => 0,
+    default  => '',
+);
 
-($opt_H) || ($opt_H = shift @ARGV) || usage("Host name not specified\n");
-my $host = $1 if ($opt_H =~ /^([-_.A-Za-z0-9 ]+\$?)$/);
-($host) || usage("Invalid host: $opt_H\n");
-
-($opt_s) || ($opt_s = shift @ARGV) || usage("Share volume not specified\n");
-my $share = $1 if ($opt_s =~ /^([-_.A-Za-z0-9 ]+\$?)$/);
-($share) || usage("Invalid share: $opt_s\n");
-
-defined($opt_u) || ($opt_u = shift @ARGV) || ($opt_u = "guest");
-my $user = $1 if ($opt_u =~ /^([-_.A-Za-z0-9\\]*)$/);
-defined($user) || usage("Invalid user: $opt_u\n");
-
-defined($opt_p) || ($opt_p = shift @ARGV) || ($opt_p = "");
-my $pass = $1 if ($opt_p =~ /(.*)/);
-
-($opt_w) || ($opt_w = shift @ARGV) || ($opt_w = 85);
-my $warn = $1 if ($opt_w =~ /^([0-9]{1,2}\%?|100\%?|[0-9]+[kMG])$/);
-($warn) || usage("Invalid warning threshold: $opt_w\n");
-
-($opt_c) || ($opt_c = shift @ARGV) || ($opt_c = 95);
-my $crit = $1 if ($opt_c =~ /^([0-9]{1,2}\%?|100\%?|[0-9]+[kMG])$/);
-($crit) || usage("Invalid critical threshold: $opt_c\n");
-
-# Execute the given command line and return anything it writes to STDOUT and/or
-# STDERR.  (This might be useful for other plugins, too, so it should possibly
-# be moved to utils.pm.)
-sub output_and_error_of {
-	local *CMD;
-	local $/ = undef;
-	my $pid = open CMD, "-|";
-	if (defined($pid)) {
-		if ($pid) {
-			return <CMD>;
-		} else {
-			open STDERR, ">&STDOUT" and exec @_;
-			exit(1);
-		}
-	}
-	return undef;
+$ng->arg(
+    spec => 'warning|w=s',
+    help => [
+        "Percent of used space at which a warning will be generated (Default: 85%)",
+        "Amount of used space [k/M/G] at which a warning will be generated",
+    ],
+    required => 0,
+    default  => '85',
+    label    => [ 'PERCENT%', 'BYTES[kMG]', ],
+);
+
+$ng->arg(
+    spec => 'critical|c=s',
+    help => [
+        "Percent of used space at which a critical will be generated (Default: 95%)",
+        "Amount of used space [k/M/G] at which a critical will be generated",
+    ],
+    required => 0,
+    default  => '95',
+    label    => [ 'PERCENT%', 'BYTES[kMG]', ],
+);
+
+$ng->arg(
+    spec => 'port|P=i',
+    help =>
+        "Port to be used to connect to. Some Windows boxes use 139, others 445 (Defaults to smbclient default)",
+    required => 0,
+);
+
+$ng->getopts();
+
+my ($host)      = $ng->hostname;
+my ($share)     = $ng->share;
+my ($port)      = $ng->port;
+my ($user)      = $ng->user;
+my ($pass)      = $ng->password;
+my ($workgroup) = $ng->workgroup;
+my ($warning)   = $ng->warning;
+my ($critical)  = $ng->critical;
+
+my ( $verbose, $warn, $crit );
+
+$ENV{'PATH'}     = '';
+$ENV{'BASH_ENV'} = '';
+$ENV{'ENV'}      = '';
+
+my $smbclient = "$utils::PATH_TO_SMBCLIENT";
+my $smbclientoptions = $port ? "-p $port " : "";
+
+if ( !$smbclient || !-x $smbclient ) {
+    $np->nagios_die("Path to smbclient not configured correctly in utils.pm");
 }
 
+# Options checking
+
+( $host =~ /^([-_.A-Za-z0-9]+\$?)$/ )
+    or usage("Invalid host: $host\n");
+
+( $share =~ /^([-_.A-Za-z0-9]+\$?)$/ )
+    or usage("Invalid share: $share\n");
+
+( $user =~ /^([-_.A-Za-z0-9\\]+)$/ )
+    or usage("Invalid user: $user\n");
+
+( $warning =~ /^([0-9]{1,2}\%?|100\%?|[0-9]+[kMG])$/ )
+    or usage("Invalid warning threshold: $warning\n");
+
+( $critical =~ /^([0-9]{1,2}\%?|100\%?|[0-9]+[kMG])$/ )
+    or usage("Invalid critical threshold: $critical\n");
+
 # split the type from the unit value
 #Check $warn and $crit for type (%/M/G) and set up for tests
 #P = Percent, K = KBytes
 my $warn_type;
 my $crit_type;
 
-if ($opt_w =~ /^([0-9]+)\%?$/) {
-	$warn = "$1";
-	$warn_type = "P";
-} elsif ($opt_w =~ /^([0-9]+)k$/) {
-	$warn_type = "K";
-	$warn = $1;
-} elsif ($opt_w =~ /^([0-9]+)M$/) {
-	$warn_type = "K";
-	$warn = $1 * 1024;
-} elsif ($opt_w =~ /^([0-9]+)G$/) {
-	$warn_type = "K";
-	$warn = $1 * 1048576;
-}
-if ($opt_c =~ /^([0-9]+)\%?$/) {
-	$crit = "$1";
-	$crit_type = "P";
-} elsif ($opt_c =~ /^([0-9]+)k$/) {
-	$crit_type = "K";
-	$crit = $1;
-} elsif ($opt_c =~ /^([0-9]+)M$/) {
-	$crit_type = "K";
-	$crit = $1 * 1024;
-} elsif ($opt_c =~ /^([0-9]+)G$/) {
-	$crit_type = "K";
-	$crit = $1 * 1048576;
+if ( $warning =~ /^([0-9]+)\%?$/ ) {
+    $warn      = "$1";
+    $warn_type = "P";
+}
+elsif ( $warning =~ /^([0-9]+)k$/ ) {
+    $warn_type = "K";
+    $warn      = $1;
+}
+elsif ( $warning =~ /^([0-9]+)M$/ ) {
+    $warn_type = "K";
+    $warn      = $1 * 1024;
+}
+elsif ( $warning =~ /^([0-9]+)G$/ ) {
+    $warn_type = "K";
+    $warn      = $1 * 1048576;
+}
+if ( $critical =~ /^([0-9]+)\%?$/ ) {
+    $crit      = "$1";
+    $crit_type = "P";
+}
+elsif ( $critical =~ /^([0-9]+)k$/ ) {
+    $crit_type = "K";
+    $crit      = $1;
+}
+elsif ( $critical =~ /^([0-9]+)M$/ ) {
+    $crit_type = "K";
+    $crit      = $1 * 1024;
+}
+elsif ( $critical =~ /^([0-9]+)G$/ ) {
+    $crit_type = "K";
+    $crit      = $1 * 1048576;
 }
 
 # check if both warning and critical are percentage or size
-unless( ( $warn_type eq "P" && $crit_type eq "P" ) || ( $warn_type ne "P" && $crit_type ne "P" ) ){
-	$opt_w =~ s/\%/\%\%/g;
-	$opt_c =~ s/\%/\%\%/g;
-	usage("Both warning and critical should be same type- warning: $opt_w critical: $opt_c \n");
+unless ( ( $warn_type eq "P" && $crit_type eq "P" )
+    || ( $warn_type ne "P" && $crit_type ne "P" ) )
+{
+    $warning  =~ s/\%/\%\%/g;
+    $critical =~ s/\%/\%\%/g;
+    usage(
+        "Both warning and critical should be same type- warning: $warning critical: $critical \n"
+    );
 }
 
 # verify warning is less than critical
-if ( $warn_type eq "K") {
-	unless ( $warn > $crit) {
-		usage("Disk size: warning ($opt_w) should be greater than critical ($opt_c) \n");
-	}
-}else{
-	unless ( $warn < $crit) {
-		$opt_w =~ s/\%/\%\%/g;
-		$opt_c =~ s/\%/\%\%/g;
-		usage("Percentage: warning ($opt_w) should be less than critical ($opt_c) \n");
-	}
+if ( $warn_type eq "K" ) {
+    unless ( $warn > $crit ) {
+        usage(
+            "Disk size: warning ($warning) should be greater than critical ($critical) \n"
+        );
+    }
+}
+else {
+    unless ( $warn < $crit ) {
+        $warning  =~ s/\%/\%\%/g;
+        $critical =~ s/\%/\%\%/g;
+        usage(
+            "Percentage: warning ($warning) should be less than critical ($critical) \n"
+        );
+    }
 }
 
-my $workgroup = $1 if (defined($opt_W) && $opt_W =~ /(.*)/);
+#$workgroup = $1 if (defined($workgroup) && $workgroup =~ /(.*)/);
 
-my $address = $1 if (defined($opt_a) && $opt_a =~ /(.*)/);
+# sanitize options that will be passed to shell
+my ($hostname)  = $host;
+my ($sharename) = $share;
+$host             = quotemeta($host);
+$share            = quotemeta($share);
+$workgroup        = quotemeta($workgroup);
+$user             = quotemeta($user);
+$pass             = quotemeta($pass);
+$smbclientoptions = quotemeta($smbclientoptions);
 
 # end of options checking
 
-
-my $state = "OK";
+my $state  = "OK";
 my $answer = undef;
-my $res = undef;
-my $perfdata = "";
-my @lines = undef;
-
-# Just in case of problems, let's not hang the monitoring system
-$SIG{'ALRM'} = sub { 
-	print "No Answer from Client\n";
-	exit $ERRORS{"UNKNOWN"};
+my $res    = undef;
+my @lines  = undef;
+
+# Just in case of problems, let's not hang Nagios
+$SIG{'ALRM'} = sub {
+    $np->nagios_exit( $ERRORS{'CRITICAL'}, "No answer from client" );
 };
 alarm($TIMEOUT);
 
-# Execute a "du" on the share using smbclient program
+# Execute an "ls" on the share using smbclient program
 # get the results into $res
-my @cmd = (
-	$smbclient,
-	"//$host/$share",
-	"-U", "$user%$pass",
-	defined($workgroup) ? ("-W", $workgroup) : (),
-	defined($address) ? ("-I", $address) : (),
-	defined($opt_P) ? ("-p", $opt_P) : (),
-	"-c", "du"
-);
-
-print join(" ", @cmd) . "\n" if ($verbose);
-$res = output_and_error_of(@cmd) or exit $ERRORS{"UNKNOWN"};
+if ( defined($workgroup) ) {
+    $res
+        = qx/$smbclient \/\/$host\/$share -W $workgroup -U $user%$pass $smbclientoptions -c ls/;
+}
+else {
+    print "$smbclient "
+        . "\/\/$host\/$share"
+        . " $pass -U $user $smbclientoptions -c ls\n"
+        if ($verbose);
+    $res
+        = qx/$smbclient \/\/$host\/$share -U $user%$pass $smbclientoptions -c ls/;
+}
 
 #Turn off alarm
 alarm(0);
@@ -201,130 +264,107 @@
 @lines = split /\n/, $res;
 
 #Get the last line into $_
-$_ = $lines[$#lines-1];
-#print "$_\n";
+$_ = $lines[$#lines];
+($verbose) && ( print "$_\n" );
 
-#Process the last line to get free space.  
+#Process the last line to get free space.
 #If line does not match required regexp, return an UNKNOWN error
 if (/\s*(\d*) blocks of size (\d*)\. (\d*) blocks available/) {
 
-	my ($avail_bytes) = $3 * $2;
-	my ($total_bytes) = $1 * $2;
-	my ($occupied_bytes) = $1 * $2 - $avail_bytes;
-	my ($avail) = $avail_bytes/1024;
-	my ($capper) = int(($3/$1)*100);
-	my ($mountpt) = "\\\\$host\\$share";
-
-	# TODO : why is the kB the standard unit for args ?
-	my ($warn_bytes) = $total_bytes - $warn * 1024;
-	if ($warn_type eq "P") {
-		$warn_bytes = $warn * $1 * $2 / 100;
-	}
-	my ($crit_bytes) = $total_bytes - $crit * 1024;
-	if ($crit_type eq "P") {
-		$crit_bytes = $crit * $1 * $2 / 100;
-	}
-
-
-	if (int($avail / 1024) > 0) {
-		$avail = int($avail / 1024);
-		if (int($avail /1024) > 0) {
-			$avail = (int(($avail / 1024)*100))/100;
-			$avail = $avail ."G";
-		} else {
-			$avail = $avail ."M";
-		}
-	} else {
-		$avail = $avail ."K";
-	}
-
-#print ":$warn:$warn_type:\n";
-#print ":$crit:$crit_type:\n";
-#print ":$avail:$avail_bytes:$capper:$mountpt:\n";
-	$perfdata = "'" . $share . "'=" . $occupied_bytes . 'B;'
-		. $warn_bytes . ';'
-		. $crit_bytes . ';'
-		. '0;'
-		. $total_bytes;
-
-	if ($occupied_bytes > $crit_bytes) {
-		$state = "CRITICAL";
-		$answer = "CRITICAL: Only $avail ($capper%) free on $mountpt";
-	} elsif ( $occupied_bytes > $warn_bytes ) {
-		$state = "WARNING";
-		$answer = "WARNING: Only $avail ($capper%) free on $mountpt";
-	} else {
-		$answer = "Disk ok - $avail ($capper%) free on $mountpt";
-	}
-} else {
-	$answer = "Result from smbclient not suitable";
-	$state = "UNKNOWN";
-	foreach (@lines) {
-		if (/(Access denied|NT_STATUS_LOGON_FAILURE|NT_STATUS_ACCESS_DENIED)/) {
-			$answer = "Access Denied";
-			$state = "CRITICAL";
-			last;
-		}
-		if (/(Unknown host \w*|Connection.*failed)/) {
-			$answer = "$1";
-			$state = "CRITICAL";
-			last;
-		}
-		if (/(You specified an invalid share name|NT_STATUS_BAD_NETWORK_NAME)/) {
-			$answer = "Invalid share name \\\\$host\\$share";
-			$state = "CRITICAL";
-			last;
-		}
-	}
-}
-
-
-print $answer;
-print " | " . $perfdata if ($perfdata);
-print "\n";
-print "$state\n" if ($verbose);
-exit $ERRORS{$state};
-
-sub print_usage () {
-	print "Usage: $PROGNAME -H <host> -s <share> -u <user> -p <password> 
-      -w <warn> -c <crit> [-W <workgroup>] [-P <port>] [-a <IP>]\n";
-}
-
-sub print_help () {
-	print_revision($PROGNAME,'@NP_VERSION@');
-	print "Copyright (c) 2000 Michael Anthon/Karl DeBisschop
-
-Perl Check SMB Disk plugin for monitoring
-
-";
-	print_usage();
-	print "
--H, --hostname=HOST
-   NetBIOS name of the server
--s, --share=STRING
-   Share name to be tested
--W, --workgroup=STRING
-   Workgroup or Domain used (Defaults to \"WORKGROUP\")
--a, --address=IP
-   IP-address of HOST (only necessary if HOST is in another network)
--u, --user=STRING
-   Username to log in to server. (Defaults to \"guest\")
--p, --password=STRING
-   Password to log in to server. (Defaults to an empty password)
--w, --warning=INTEGER or INTEGER[kMG]
-   Percent of used space at which a warning will be generated (Default: 85%)
-      
--c, --critical=INTEGER or INTEGER[kMG]
-   Percent of used space at which a critical will be generated (Defaults: 95%)
--P, --port=INTEGER
-   Port to be used to connect to. Some Windows boxes use 139, others 445 (Defaults to smbclient default)
-   
-   If thresholds are followed by either a k, M, or G then check to see if that
-   much disk space is available (kilobytes, Megabytes, Gigabytes)
+    my ($avail)       = ( $3 * $2 ) / 1024;
+    my ($avail_bytes) = $avail;
+    my ($capper)      = int( ( $3 / $1 ) * 100 );
+    my ($mountpt)     = "\\\\$hostname\\$sharename";
+
+    if ( int( $avail / 1024 ) > 0 ) {
+        $avail = int( $avail / 1024 );
+        if ( int( $avail / 1024 ) > 0 ) {
+            $avail = ( int( ( $avail / 1024 ) * 100 ) ) / 100;
+            $avail = $avail . "G";
+        }
+        else {
+            $avail = $avail . "M";
+        }
+    }
+    else {
+        $avail = $avail . "K";
+    }
+
+    ($verbose) && ( print ":$warn:$warn_type:\n" );
+    ($verbose) && ( print ":$crit:$crit_type:\n" );
+    ($verbose) && ( print ":$avail:$avail_bytes:$capper:$mountpt:\n" );
+
+    # set thresholds
+    my ( $value, $uom );
+
+    if ( ( $warn_type eq 'P' ) && ( $crit_type eq 'P' ) ) {
+
+        # we're using percentages
+        $np->set_thresholds(
+            warning  => 100 - $warn . ':',
+            critical => 100 - $crit . ':'
+        );
+        $value = $capper;
+        $uom   = '%';
+    }
+    else {
+
+        # we're using bytes
+        $np->set_thresholds(
+            warning  => $warn . ':',
+            critical => $crit . ':'
+        );
+        $value = $avail_bytes;
+        $uom   = 'B';
+    }
+
+    # check thresholds
+    $state = $np->check_threshold($value);
+
+    if ( $state > 0 ) {
+
+        # a problem
+        $answer = "Only $avail ($capper%) free on $mountpt\n";
+    }
+    else {
+
+        # ok
+        $answer = "$avail ($capper%) free on $mountpt\n";
+    }
+
+    # add performance data
+    $np->add_perfdata(
+        label     => 'free',
+        value     => $value,
+        uom       => $uom,
+        threshold => $np->threshold,
+    );
+}
+else {
+    $answer = "Result from smbclient not suitable\n";
+    $state  = "UNKNOWN";
+    foreach (@lines) {
+        if (/(Access denied|NT_STATUS_LOGON_FAILURE)/) {
+            $answer = "Access Denied\n";
+            $state  = "CRITICAL";
+            last;
+        }
+        if (/(Unknown host \w*|Connection.*failed)/) {
+            $answer = "$1\n";
+            $state  = "CRITICAL";
+            last;
+        }
+        if (/(You specified an invalid share name|NT_STATUS_BAD_NETWORK_NAME)/
+            )
+        {
+            $answer = "Invalid share name \\\\$host\\$share\n";
+            $state  = "CRITICAL";
+            last;
+        }
+    }
+}
 
-   Warning percentage should be less than critical
-   Warning (remaining) disk space should be greater than critical.
+# did we get a number back or a string?
+my ($EXIT) = ( $state =~ /^\d$/ ) ? $state : $ERRORS{$state};
 
-";
-	support();
-}
+$np->nagios_exit( $EXIT, $answer );
